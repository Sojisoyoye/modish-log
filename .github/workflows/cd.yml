name: CD Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      deploy_env:
        description: "Environment to deploy to"
        required: true
        default: "acceptance"
        type: choice
        options:
          - acceptance
          - sandbox
          - production

jobs:
  deploy-backend:
    name: Deploy Backend to Render
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Environment Variables for Render
        id: env-vars
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            ENV="${{ github.event.inputs.deploy_env }}"
          else
            ENV="acceptance"
          fi

          if [ "$ENV" == "production" ]; then
            echo "service_id=${{ secrets.RENDER_SERVICE_ID_PRODUCTION }}" >> "$GITHUB_OUTPUT"
            echo "environment=production" >> "$GITHUB_OUTPUT"
          elif [ "$ENV" == "sandbox" ]; then
            echo "service_id=${{ secrets.RENDER_SERVICE_ID_SANDBOX }}" >> "$GITHUB_OUTPUT"
            echo "environment=sandbox" >> "$GITHUB_OUTPUT"
          else
            echo "service_id=${{ secrets.RENDER_SERVICE_ID_ACCEPTANCE }}" >> "$GITHUB_OUTPUT"
            echo "environment=acceptance" >> "$GITHUB_OUTPUT"
          fi

      - name: Install render CLI
        run: |
          curl -L https://github.com/render-oss/cli/releases/download/v1.1.0/cli_1.1.0_linux_amd64.zip -o render.zip
          yes | unzip render.zip
          sudo mv cli_v1.1.0 /usr/local/bin/render

      - name: Login to Render
        run: render login --api-key ${{ secrets.RENDER_API_KEY }}
      - name: Trigger deploy with Render CLI
        run: |
          echo "Logging in to Render..."
          echo "Deploying backend to Render (${{ steps.env-vars.outputs.environment }})..."  
          render deploys create ${{ steps.env-vars.outputs.service_id }} --output json --confirm

  deploy-frontend:
    name: Deploy Frontend to Vercel
    needs: deploy-backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Set Environment Variables for Vercel
        id: env-vars
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            ENV="${{ github.event.inputs.deploy_env }}"
          else
            ENV="acceptance"
          fi

          if [ "$ENV" == "production" ]; then
            echo "project_id=${{ secrets.VERCEL_PROJECT_ID }}" >> "$GITHUB_OUTPUT"
            echo "environment=production" >> "$GITHUB_OUTPUT"
            echo "api_url=${{ secrets.REACT_APP_API_URL_PRODUCTION }}" >> "$GITHUB_OUTPUT"
          elif [ "$ENV" == "sandbox" ]; then
            echo "project_id=${{ secrets.VERCEL_PROJECT_ID_SANDBOX }}" >> "$GITHUB_OUTPUT"
            echo "environment=sandbox" >> "$GITHUB_OUTPUT"
            echo "api_url=${{ secrets.REACT_APP_API_URL_SANDBOX }}" >> "$GITHUB_OUTPUT"
          else
            echo "project_id=${{ secrets.VERCEL_PROJECT_ID_ACCEPTANCE }}" >> "$GITHUB_OUTPUT"
            echo "environment=acceptance" >> "$GITHUB_OUTPUT"
            echo "api_url=${{ secrets.REACT_APP_API_URL_ACCEPTANCE }}" >> "$GITHUB_OUTPUT"
          fi
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ steps.env-vars.outputs.project_id }}
          vercel-args: "--prod"
        env:
          REACT_APP_API_URL: ${{ steps.env-vars.outputs.api_url }}
          REACT_APP_ENV: ${{ steps.env-vars.outputs.environment }}
